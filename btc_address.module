<?php
// $Id$
// btc_address.module

/**
 * @file
 * Defines a Bitcoin address field type.
 */


btc_address_bitcoin_php_load_library();

/**
 * Loads bitcoin library if it's not loaded already.
 *
 * @return
 *  TRUE if the bitcoin library is loaded, FALSE otherwise.
 */
function btc_address_bitcoin_php_load_library() {

  if (!class_exists('Bitcoin')) {
    // try using libraries module.
    if (module_exists('libraries')) {
      $libraries_path= drupal_get_path('module', 'libraries');
      $libraries_include = $libraries_path . '/' . 'libraries.module';
      
      include_once($libraries_include);

      // Let's see if Bitcoin is really available from libraries.
      $bitcoin_library = './'. libraries_get_path('bitcoin-php') .'/src/bitcoin.inc';
      if (file_exists($bitcoin_library)) {
        include_once $bitcoin_library;
      }
    }
  }
  // Tell the caller if the Bitcoin class exists.
  return class_exists('Bitcoin');
}



/**
 * Implementation of hook_theme().
 */
function btc_address_theme() {
  return array(
    'btc_address_textfield' => array(
      'arguments' => array('element' => NULL),
    ),
    'btc_address_formatter_default' => array(
      'arguments' => array('element' => NULL),
    ),
    'btc_address_formatter_bitcoin_address_plain' => array(
      'arguments' => array('element' => NULL),
    ),
  );
}

/**
 * Implementation of hook_field_info().
 */
function btc_address_field_info() {
  return array(
    'btc_address' => array(
      'label' => t('Bitcoin Address'),
      'description' => t('Store Bitcoin address in the database.'),
//      'content_icon' => 'icon_content_text.png',
    ),
  );
}

/**
 * Implementation of hook_field_settings().
 */
function btc_address_field_settings($op, $field) {
  switch ($op) {
     case 'form':
      $form = array();
      $options = array(0 => t('Bitcoin address'), );

      return $form;
      break;
    case 'save':
      return array('btc_address_processing', 'max_length', 'allowed_values', 'allowed_values_php');
      break;
    case 'database columns':
        $columns['value'] = array('type' => 'varchar', 'length' => 36, 'not null' => FALSE, 'sortable' => TRUE, 'views' => TRUE);
        return $columns;
        break;
    case 'views data':
      $allowed_values = content_allowed_values($field);
      if (count($allowed_values)) {
        $data = content_views_field_views_data($field);
        $db_info = content_database_info($field);
        $table_alias = content_views_tablename($field);

        // Filter: Add a 'many to one' filter.
        $copy = $data[$table_alias][$field['field_name'] .'_value'];
        $copy['title'] = t('@label (!name) - Allowed values', array('@label' => t($field['widget']['label']), '!name' => $field['field_name']));
        $copy['filter']['handler'] = 'content_handler_filter_many_to_one';
        unset($copy['field'], $copy['argument'], $copy['sort']);
        $data[$table_alias][$field['field_name'] .'_value_many_to_one'] = $copy;
        // Argument : swap the handler to the 'many to one' operator.
        $data[$table_alias][$field['field_name'] .'_value']['argument']['handler'] = 'content_handler_argument_many_to_one';
        return $data;
      }
      break;
  }  // done switch($op)
}

/**
 * Implementation of hook_field().
 */
function btc_address_field($op, &$node, $field, &$items, $teaser, $page) {
  switch ($op) {
    case 'validate':
      $allowed_values = content_allowed_values($field);
      if (is_array($items)) {
        foreach ($items as $delta => $item) {
          $error_element = isset($item['_error_element']) ? $item['_error_element'] : '';
          if (is_array($item) && isset($item['_error_element'])) unset($item['_error_element']);
          if (!empty($item['value'])) {
            if (count($allowed_values) && !array_key_exists($item['value'], $allowed_values)) {
              form_set_error($error_element, t('%name: illegal value.', array('%name' => t($field['widget']['label']))));
            }
            if (!empty($field['max_length']) && drupal_strlen($item['value']) > $field['max_length']) {
              form_set_error($error_element, t('%name: the value may not be longer than %max characters.', array('%name' => $field['widget']['label'], '%max' => $field['max_length'])));
            }
          }
        }
      }
      return $items;
      break;
    case 'sanitize':
      foreach ($items as $delta => $item) {
        if (!empty($field['text_processing'])) {
          $check = is_null($node) || (isset($node->build_mode) && $node->build_mode == NODE_BUILD_PREVIEW);
          $text = isset($item['value']) ? check_markup($item['value'], $item['format'], $check) : '';
        }
        else {
          $text = check_plain($item['value']);
        }
        $items[$delta]['safe'] = $text;
      }






      break;
  }  // done switch($op)
}

/**
 * Implementation of hook_content_is_empty().
 */
function btc_address_content_is_empty($item, $field) {
  if (empty($item['value']) && (string)$item['value'] !== '0') {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implementation of hook_field_formatter_info().
 */
function btc_address_field_formatter_info() {
  return array(
    'default' => array(
      'label' => t('Bitcoin address, as link (default)'),
      'field types' => array('btc_address'),
      'multiple values' => CONTENT_HANDLE_CORE,
    ),
    'bitcoin_address_plain' => array(
      'label' => t('Bitcoin address, as plain text'),
      'field types' => array('btc_address'),
      'multiple values' => CONTENT_HANDLE_CORE,
    ),


  );
}

/**
 * Theme function for 'default' bitcoin address (with link) field formatter.
 */
function theme_btc_address_formatter_default($element) {

  // check to see if there is an allowed value for this element, if so display it, if not, display the safe version of it
  $address =  ($allowed =_btc_address_allowed_values($element)) ? $allowed : $element['#item']['safe'];
  if (!empty($address)) {
    $retval = l($address, 'bitcoin:' . $address, array('absolute' => TRUE) );
    return  $retval;
  }
  else{
    return '';
  }
}



/**
 * Theme function for plain bitcoin address field formatter.
 */
function theme_btc_address_formatter_bitcoin_address_plain($element) {

  // check to see if there is an allowed value for this element, if so display it, if not, display the safe version of it
  $retval =  ($allowed =_btc_address_allowed_values($element)) ? $allowed : $element['#item']['safe'];

  return  $retval;
}



function _btc_address_allowed_values($element) {
  $field = content_fields($element['#field_name'], $element['#type_name']);

  if (($allowed_values = content_allowed_values($field)) && isset($allowed_values[$element['#item']['value']])) {
    $retval = $allowed_values[$element['#item']['value']];
    return $retval;
  
  }
}

/**
 * Implementation of hook_widget_info().
 *
 * Here we indicate that the content module will handle
 * the default value and multiple values for these widgets.
 *
 * Callbacks can be omitted if default handing is used.
 * They're included here just so this module can be used
 * as an example for custom modules that might do things
 * differently.
 */
function btc_address_widget_info() {
  return array(
    'btc_address_textfield' => array(
      'label' => t('Bitcoin Address'),
      'field types' => array('btc_address'),
      'multiple values' => CONTENT_HANDLE_CORE,
      'callbacks' => array(
        'default value' => CONTENT_CALLBACK_DEFAULT,
      ),
    ),
  );
}

/**
 * Implementation of FAPI hook_elements().
 *
 * Any FAPI callbacks needed for individual widgets can be declared here,
 * and the element will be passed to those callbacks for processing.
 *
 * Drupal will automatically theme the element using a theme with
 * the same name as the hook_elements key.
 *
 * Autocomplete_path is not used by btc_address_widget but other widgets can use it
 * (see nodereference and userreference).
 */
function btc_address_elements() {
  return array(
    'btc_address_textfield' => array(
      '#input' => TRUE,
      '#columns' => array('value'), '#delta' => 0,
      '#process' => array('btc_address_textfield_process'),
      '#autocomplete_path' => FALSE,
    ),
  );
}


/**
 * Implementation of hook_widget().
 *
 * Attach a single form element to the form. It will be built out and
 * validated in the callback(s) listed in hook_elements. We build it
 * out in the callbacks rather than here in hook_widget so it can be
 * plugged into any module that can provide it with valid
 * $field information.
 *
 * Content module will set the weight, field name and delta values
 * for each form element. This is a change from earlier CCK versions
 * where the widget managed its own multiple values.
 *
 * If there are multiple values for this field, the content module will
 * call this function as many times as needed.
 *
 * @param $form
 *   the entire form array, $form['#node'] holds node information
 * @param $form_state
 *   the form_state, $form_state['values'][$field['field_name']]
 *   holds the field's form values.
 * @param $field
 *   the field array
 * @param $items
 *   array of default values for this field
 * @param $delta
 *   the order of this item in the array of subelements (0, 1, 2, etc)
 *
 * @return
 *   the form item for a single element for this field
 */
function btc_address_widget(&$form, &$form_state, $field, $items, $delta = 0) {
  $element = array(
    '#type' => $field['widget']['type'],
    '#default_value' => isset($items[$delta]) ? $items[$delta] : '',
  );
  return $element;
}

/**
 * Process an individual element.
 *
 * Build the form element. When creating a form using FAPI #process,
 * note that $element['#value'] is already set.
 *
 * The $fields array is in $form['#field_info'][$element['#field_name']].
 */
function btc_address_textfield_process($element, $edit, $form_state, $form) {
  $field = $form['#field_info'][$element['#field_name']];
  $field_key = $element['#columns'][0];
  $delta = $element['#delta'];
  $element[$field_key] = array(
    '#type' => 'textfield',
    '#default_value' => isset($element['#value'][$field_key]) ? $element['#value'][$field_key] : NULL,
    '#autocomplete_path' => $element['#autocomplete_path'],
    '#size' => 48,  
    '#maxlegth' => 48, 
    '#attributes' => array('class' => 'number'),
    // The following values were set by the content module and need
    // to be passed down to the nested element.
    '#title' => $element['#title'],
    '#description' => $element['#description'],
    '#required' => $element['#required'],
    '#field_name' => $element['#field_name'],
    '#type_name' => $element['#type_name'],
    '#delta' => $element['#delta'],
    '#columns' => $element['#columns'],
  );

  //  $element[$field_key]['#maxlength'] = !empty($field['max_length']) ? $field['max_length'] : NULL;

  if (!empty($field['btc_address_processing'])) {
    $filter_key = $element['#columns'][1];
    $format = isset($element['#value'][$filter_key]) ? $element['#value'][$filter_key] : FILTER_FORMAT_DEFAULT;
    $parents = array_merge($element['#parents'] , array($filter_key));
    $element[$filter_key] = filter_form($format, 1, $parents);
  }



  // Make sure we don't wipe out element validation added elsewhere.
  if (empty($element['#element_validate'])) {
    $element['#element_validate'] = array();
  }

  $element['#element_validate'][] = 'btc_address_validate';


  // Used so that hook_field('validate') knows where to flag an error.
  $element['_error_element'] = array(
    '#type' => 'value',
    '#value' => implode('][', array_merge($element['#parents'], array($field_key))),
  );

  return $element;
}



/**
 * FAPI validation of a btc_address element.
 */
function btc_address_validate($element, &$form_state) {

  $field_name = $element['#field_name'];
  $type_name = $element['#type_name'];
  $field = content_fields($field_name, $type_name);
  $field_key = $element['#columns'][0];
  $value = $element['#value'][$field_key];

  if (($element[$field_key]['#required'] || !empty($value))) {
    //    $start = $value;
    //  $value = preg_replace('@[^-0-9]@', '', $value);
    $bitcoin = new Bitcoin;

    if (!$bitcoin->checkAddress($value)) {
      $error_field = implode('][', $element['#parents']) .']['. $field_key;
      form_set_error($error_field, t('Not a valid Bitcoin address in %field.', array('%field' => t($field['widget']['label']))));
    }
    else {
      form_set_value($element[$field_key], $value, $form_state);
    }
  }  // done if required or not empty
}




/**
 * FAPI theme for an individual text elements.
 *
 * The Bitcoin address is already rendered by the
 * Bitcoin address themes and the html output
 * lives in $element['#children']. Override this theme to
 * make custom changes to the output.
 *
 * $element['#field_name'] contains the field name
 * $element['#delta]  is the position of this element in the group
 */
function theme_btc_address_textfield($element) {
  return $element['#children'];
}

